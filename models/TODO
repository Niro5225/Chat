// TODO: Add new structs
type User struct {
	ID        uint64
	FirstName string
	LastName  string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type UserCredential struct {
	ID       uint64 // user.ID One to One
	Email    string
	Password string
}

type Message struct {
	ID        uint64
	Text      string
	ChatID    uint64
	CreatedBy uint64 // user.ID
	CreatedAt time.Time
	UpdatedAt time.Time
}

// PrimaryKey(userID, messageID)
type UserMessage struct {
	UserID    uint64 // user.ID
	MessageID uint64 // message.ID
	IsRead    bool   // Set true after read
}

type Chat struct {
	ID          uint64
	Name        string
	Description string
	CreatedBy   uint64
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type UserFilter struct {
	IDs    []uint64
	Email  *string
	Search *string // LIKE first_name or last_name
	Limit  *int
	Offset *int
}

type UserRepository interface {
	GetUser(id uint64) (*User, error)
	GetUsers(userFilter *UserFilter) (*User, error)
	CreateUser(user User) (*User, error)
	UpdateUser(user User) (*User, error)
	CreateUserCredential(credential UserCredential) (*UserCredential, error)
	UpdateUserCredential(credential UserCredential) (*UserCredential, error)
	DeleteUser(id uint64) error
}

type ChatFilter struct {
	IDs     []uint64
	Search  *string // LIKE name or description
	UserIDs []uint64
}

type ChatRepository interface {
	GetChat(id uint64) (*Chat, error)
	GetChats(filter *ChatFilter) ([]Chat, error)
	CreateChat(chat Chat) (*Chat, error)
	UpdateChat(chat Chat) (*Chat, error)
	DeleteChat(id uint64) error
}

type MessageFilter struct {
	IDs     []uint64
	Search  *string // LIKE text
	ChatIDs []uint64
	UserIDs []uint64
}

type MessageRepository interface {
	GetMessage(id uint64) (*Message, error)
	GetMessages(filter *MessageFilter) ([]Message, error)
	CreateMessage(chat Message) (*Message, error)
	UpdateMessage(chat Message) (*Message, error)
	DeleteMessage(id uint64) error

	CreateUserMessages(userMessage []UserMessage) (*UserMessage, error)
	UpdateUserMessage(chat UserMessage) (*UserMessage, error)
	DeleteUserMessage(userMessage UserMessage) error
}

// TODO: Do migrations for new structs
// TODO: Do tests for new structs
// TODO: Написать имплементацию для этих репозиториев